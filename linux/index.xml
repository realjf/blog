<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linuxes on Realjf&#39;s blog</title>
    <link>https://realjf.io/linux/</link>
    <description>Recent content in Linuxes on Realjf&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Nov 2020 21:46:47 +0800</lastBuildDate>
    
	<atom:link href="https://realjf.io/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何安装QEMU模拟器 How to Install Qemu</title>
      <link>https://realjf.io/linux/how-to-install-qemu/</link>
      <pubDate>Sat, 28 Nov 2020 21:46:47 +0800</pubDate>
      
      <guid>https://realjf.io/linux/how-to-install-qemu/</guid>
      <description>QEMU是一套由法布里斯·贝拉(Fabrice Bellard)所编写的以GPL许可证分发源码的模拟处理器，在GNU/Linux平台上使用广泛。 Bochs，PearPC等与其类似，但不具备其许多特性，比如高速度及跨平台的特性，通过KQEMU这个闭源的加速器，QEMU能模拟至接近真实电脑的速度
从源码安装 git clone https://git.qemu.org/git/qemu.gitcd qemugit submodule initgit submodule update --recursive./configuremakeLinux apt-get install qemu如果要使用如qemu-system-i386这样的命令，可以运行如下命令安装
apt-get install qemu-systemQEMU官网</description>
    </item>
    
    <item>
      <title>如何为linux内核增加其他cpu架构支持 How to Add Other Architecture</title>
      <link>https://realjf.io/linux/how-to-add-other-architecture/</link>
      <pubDate>Sat, 28 Nov 2020 21:09:06 +0800</pubDate>
      
      <guid>https://realjf.io/linux/how-to-add-other-architecture/</guid>
      <description>添加其他架构软件安装支持 sudo dpkg --add-architecture i386sudo apt-get updatesudo-get upgradesudo-get dist-upgrade移除某个架构 sudo dpkg --remove-architecture i386</description>
    </item>
    
    <item>
      <title>如何安装低版本的gcc How to Install Old Gcc on Ubuntu</title>
      <link>https://realjf.io/linux/how-to-install-old-gcc-on-ubuntu/</link>
      <pubDate>Sat, 28 Nov 2020 21:02:00 +0800</pubDate>
      
      <guid>https://realjf.io/linux/how-to-install-old-gcc-on-ubuntu/</guid>
      <description>提供如下gcc版本 # provides# lucid/usr/bin/gcc-3.3/usr/bin/g++-3.3/usr/bin/gcc-3.4/usr/bin/g++-3.4/usr/bin/gcc-4.0/usr/bin/g++-4.0/usr/bin/gcc-4.1/usr/bin/g++-4.1/usr/bin/gcc-4.2/usr/bin/g++-4.2# precise/usr/bin/gcc-3.3/usr/bin/g++-3.3/usr/bin/gcc-4.5/usr/bin/g++-4.5# trusty/usr/bin/gcc-3.3/usr/bin/g++-3.3/usr/bin/gcc-4.5/usr/bin/g++-4.5安装 # get old gcc, compiler tools only ...sudo add-apt-repository ppa:h-rayflood/gcc-lowersudo apt-get updatesudo apt-get dist-upgrade sudo apt-get install gcc-N.Nsudo apt-get install g++-N.N update：当执行apt-get update时，update重点更新的是来自软件源的软件包的索引记录（即index files） upgrade: 当执行apt-get upgrade时，upgrade是根据update更新的索引记录来下载并更新软件包，在以下几种情况，某个待升级的软件包不会被升级。  新软件包和系统的某个软件包有冲突 新软件包有新的依赖，但系统不满足依赖 安装新软件包时，要求先移除旧的软件包   dist-upgrade: 当执行apt-get dist-upgrade时，除了拥有upgrade的全部功能外，dist-upgrade会比upgrade更智能地处理需要更新的软件包的依赖关系  可以智能处理新软件包的依赖 智能冲突解决系统 安装新软件包时，可以移除旧软件包，但不是所有软件都可以   full-upgrade：在执行full-upgrade 之前也要先执行update ，升级整个系统，必要时可以移除旧软件包  </description>
    </item>
    
    <item>
      <title>如何切换多个版本的gcc编译器 How to Switch Between Multiple Gcc Compiler Versions</title>
      <link>https://realjf.io/linux/how-to-switch-between-multiple-gcc-compiler-versions/</link>
      <pubDate>Sat, 28 Nov 2020 20:22:22 +0800</pubDate>
      
      <guid>https://realjf.io/linux/how-to-switch-between-multiple-gcc-compiler-versions/</guid>
      <description>读完本节你将学到  如何安装多版本的gcc和g++编译器版本 如何创建可选的编译器版本列表 如何在多版本编译器间切换  软件要求  gcc ubuntu  安装gcc 安装多个版本的gcc sudo apt-get install build-essentialsudo apt -y install gcc-7 g++-7 gcc-8 g++-8 gcc-9 g++-9使用update-alternatives工具创建多版本gcc编译器可选列表 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 7sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 7sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9 最后一行的数字是优先级</description>
    </item>
    
    <item>
      <title>免秘钥登录配置 Ssh Login Nopassword</title>
      <link>https://realjf.io/linux/ssh-login-nopassword/</link>
      <pubDate>Mon, 11 May 2020 16:20:44 +0800</pubDate>
      
      <guid>https://realjf.io/linux/ssh-login-nopassword/</guid>
      <description>方法一 在一个节点生成公钥，然后利用ssh-copy-id复制到各节点
ssh-keygen -t rsa -b 4096 -P &amp;#39;&amp;#39; -f ~/.ssh/id_rsa -C &amp;#34;备注&amp;#34;# 复制到各节点ssh-copy-id node2ssh-copy-id node3ssh-copy-id node4# 其他节点重复上述操作，实现各节点之间可以相互免密登录方法二 也可以使用shell脚本，需要提前安装好expect
yum install expect -yautoSSH.sh
#!/bin/bash## 脚本接收的参数，也就是要互相配置 SSH 免密登录的服务器列表参数BASE_HOST_LIST=$*## 密码，默认用户是当前运行脚本的用户，比如 root 用户## 这里改成你的用户对应的密码BASE_PASSWORD=&amp;#34;root&amp;#34;## shell 函数：模拟 SSH 公钥私钥文件生成的人机交互过程sshkeygen(){expect -c &amp;#34;spawn ssh-keygenexpect {\&amp;#34;ssh/id_rsa):\&amp;#34; {send \&amp;#34;\r\&amp;#34;;exp_continue}\&amp;#34;passphrase):\&amp;#34; {send \&amp;#34;\r\&amp;#34;;exp_continue}\&amp;#34;again:\&amp;#34; {send \&amp;#34;\r\&amp;#34;;exp_continue}}&amp;#34;}## shell 函数：模拟配置 SSH 免密登录过程的人机交互过程sshcopyid(){expect -c &amp;#34;spawn ssh-copy-id $1expect {\&amp;#34;(yes/no)?</description>
    </item>
    
    <item>
      <title>Jdk 8 安装</title>
      <link>https://realjf.io/linux/jdk-8u131/</link>
      <pubDate>Mon, 11 May 2020 15:46:10 +0800</pubDate>
      
      <guid>https://realjf.io/linux/jdk-8u131/</guid>
      <description>jdk下载地址： https://www.oracle.com/java/technologies/javase-jdk8-downloads.html
或者：https://www.oracle.com/java/technologies/oracle-java-archive-downloads.html
这里提供百度云下载：链接: https://pan.baidu.com/s/1_fSe_nkdoZ_QhidbQyZ1ig 提取码: ttpw
准备环境  centos7 虚拟机  手动安装 检查系统是否已经安装了jdk，有就卸载默认的jdk rpm -qa | grep jdkava-1.6.0-openjdk-1.6.0.35-1.13.7.1.el6_6.x86_64java-1.7.0-openjdk-1.7.0.79-2.5.5.4.el6.x86_64[root@node1 ~]# rpm -e --nodeps java-1.6.0-openjdk-1.6.0.35-1.13.7.1.el6_6.x86_64[root@node1 ~]# rpm -e --nodeps java-1.7.0-openjdk-1.7.0.79-2.5.5.4.el6.x86_64下载安装jdk wget https://download.oracle.com/otn/java/jdk/8u251-b08/3d5a2bb8f8d4428bbe94aed7ec7ae784/jdk-8u251-linux-x64.tar.gztar zxvf jdk-8u251-linux-x64.tar.gz -C /usr/local# 配置环境变量vi /etc/profileexport JAVA_HOME=/usr/local/jdk1.8.0_251export PATH=$PATH:$JAVA_HOME/bin# 保存退出:wqsource /etc/profile# 验证java -version</description>
    </item>
    
    <item>
      <title>debian 系统启动进入Busybox Initramfs界面</title>
      <link>https://realjf.io/linux/error/boot-into-busybox-initramfs/</link>
      <pubDate>Thu, 20 Feb 2020 22:07:19 +0800</pubDate>
      
      <guid>https://realjf.io/linux/error/boot-into-busybox-initramfs/</guid>
      <description>首先说下背景  系统环境： debian 9  问题描述1 今天使用vmware workstation的时候，提示操作失败，且提示为文件系统只读。 奇怪？怎么突然进入可读了，猜想可能文件系统哪里损坏导致进入只读保护模式。
所以重新启动，之后进入了busybox界面的Initramfs界面，输入help可以查看相应命令。 我使用exit直接退出看能否重新进入，发现还是提示错误，无法进入
 busybox可以提供一个比较完善的shell工具集以及运行环境，同时可以引导程序进入系统。
 解决 在多次尝试重启无果后，重新查看错误提示，提到了/dev/mapper/realjf&amp;ndash;vg-root的文件系统， 可能是文件系统损坏了，所以开始检查修复文件系统：fsck /dev/mapper/realjf&amp;ndash;vg-root， 然后系统开始检查文件系统损坏情况，并尝试进行修复，多次输入&amp;rsquo;y&#39;后，提示文件系统修复完成， 然后重新输入exit看是否能重新进入系统，发现已经可以进入系统了。
问题描述2 Gave up waiting for root device. Common problems:- Boot args (cat /proc/cmdline)- Check rootdelay=(did the system wait for the right device ?)- Missing modules (cat /proc/modules; ls /dev)ALERT! /dev/mapper/realjf--vg-root does not exist.Dropping to a shell!BusyBox v.1.23.2 (Debian xxx. xxx) built-in shell (ash)Enter &amp;#39;help&amp;#39; for list of built-in commands.</description>
    </item>
    
    <item>
      <title>linux系统资源设置 之 Ulimit 命令</title>
      <link>https://realjf.io/linux/command/ulimit/</link>
      <pubDate>Tue, 10 Dec 2019 14:14:25 +0800</pubDate>
      
      <guid>https://realjf.io/linux/command/ulimit/</guid>
      <description>根据linux 开发手册， ulimit 设置和获取用户的资源限制
ulimit 参数说明
   选项 说明     -t 最大 cpu 占用时间 (单位是秒)   -f 进程创建文件大小的最大值 (单位是blocks)   -d 进程最大的数据段的大小，以kbytes为单位   -s 线程栈的大小，以kbytes为单位   -c 最大的core文件的大小，以blocks为单位   -m 最大内存大小，以kbytes为单位   -u 用户最大的可用的进程数   -n 可以打开的最大文件描述符数量   -l 最大可加锁内存大小，以kbytes为单位   -v 进程最大可用的虚拟内存，以kbytes为单位   -x    -i    -q    -e    -r    -N    -p 管道缓冲区的大小，以kbytes为单位   -a 显示所有资源限制的设定   -S 设定资源的弹性限制    </description>
    </item>
    
  </channel>
</rss>
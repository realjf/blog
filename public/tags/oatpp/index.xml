<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oatpp on Realjf&#39;s blog</title>
    <link>https://realjf.io/tags/oatpp/</link>
    <description>Recent content in Oatpp on Realjf&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Sep 2020 16:30:24 +0800</lastBuildDate>
    
	<atom:link href="https://realjf.io/tags/oatpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Oatpp框架简单项目初次启动</title>
      <link>https://realjf.io/cpp/oatpp-project-start/</link>
      <pubDate>Mon, 14 Sep 2020 16:30:24 +0800</pubDate>
      
      <guid>https://realjf.io/cpp/oatpp-project-start/</guid>
      <description>准备  window10系统 已配置好c++开发环境的vscode visual studio 2019&amp;frasl;2017  方法一 开始 # 新建项目目录 mkdir oatpp_example cd oatpp_example mkdir src type null &amp;gt; CMakeLists.txt type null &amp;gt; src/main.cpp  写代码 src/main.cpp的内容如下：
#include &amp;quot;oatpp/web/server/HttpConnectionHandler.hpp&amp;quot; #include &amp;quot;oatpp/network/server/Server.hpp&amp;quot; #include &amp;quot;oatpp/network/server/SimpleTCPConnectionProvider.hpp&amp;quot; class Handler : public oatpp::web::server::HttpRequestHandler { public: /** * Handle incoming request and return outgoing response. */ std::shared_ptr&amp;lt;OutgoingResponse&amp;gt; handle(const std::shared_ptr&amp;lt;IncomingRequest&amp;gt;&amp;amp; request) override { return ResponseFactory::createResponse(Status::CODE_200, &amp;quot;Hello World!&amp;quot;); } }; void run() { /* Create Router for HTTP requests routing */ auto router = oatpp::web::server::HttpRouter::createShared(); /* Route GET - &amp;quot;/hello&amp;quot; requests to Handler */ router-&amp;gt;route(&amp;quot;GET&amp;quot;, &amp;quot;/hello&amp;quot;, std::make_shared&amp;lt;Handler&amp;gt;()); /* Create HTTP connection handler with router */ auto connectionHandler = oatpp::web::server::HttpConnectionHandler::createShared(router); /* Create TCP connection provider */ auto connectionProvider = oatpp::network::server::SimpleTCPConnectionProvider::createShared(8000 /*port*/); /* Create server which takes provided TCP connection and passes them to HTTP connection handler */ oatpp::network::server::Server server(connectionProvider, connectionHandler); /* Priny info about server port */ OATPP_LOGI(&amp;quot;MyApp&amp;quot;, &amp;quot;Server running on port %s&amp;quot;, connectionProvider-&amp;gt;getProperty(&amp;quot;port&amp;quot;).</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>etcd on Realjf&#39;s blog</title>
    <link>https://realjf.io/categories/etcd/</link>
    <description>Recent content in etcd on Realjf&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Apr 2021 15:50:55 +0800</lastBuildDate><atom:link href="https://realjf.io/categories/etcd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>etcd使用实例 ETCD Example</title>
      <link>https://realjf.io/etcd/example/</link>
      <pubDate>Mon, 12 Apr 2021 15:50:55 +0800</pubDate>
      
      <guid>https://realjf.io/etcd/example/</guid>
      <description>下载安装 下载地址https://github.com/etcd-io/etcd/releases
wget https://github.com/etcd-io/etcd/releases/download/v3.4.15/etcd-v3.4.15-linux-amd64.tar.gz tar zxvf etcd-v3.4.15-linux-amd64.tar.gz cd etcd-v3.4.15-linux-amd64 启动服务 # 目录中的etcd为服务端程序，etcdctl为客户端程序 # 启动服务 ./etcd --listen-client-urls &amp;#39;http://127.0.0.1:2379&amp;#39; --advertise-client-urls &amp;#39;http://0.0.0.0:2379&amp;#39; # --listen-client-urls 用于客户端通信的url，可以监听多个 # --advertise-client-urls 建议使用的客户端通信url 客户端常见命令 # 1. 获取一个键值对 ./etcdctl get name # 2. 设置一个键值对 ./etcdctl put name value # 3. 删除键值对 ./etcdctl del name # etcd的key是有序存储的，本质上是字符串，可以模拟出目录的结构，例如：/a/b，/a/b/c，/a/b/d 三个key，由于他们在存储 # 中的顺序排列，通过定位到key=/a/b并依次顺序向后扫描，就会遇到/a/b/c和/a/b/d这两个子目录. # 4. 也可以获取某个目录下的所有key，需要加上--prefix参数 ./etcdctl get &amp;#34;/a/b&amp;#34; --prefix # 5. 删除所有key ./etcdctl del &amp;#34;/a/b&amp;#34; --prefix watch命令 可以使用watch命令监测key的变化，该命令会建立长连接。 由于etcd采用mvcc多版本并发控制，etcd的watch可以从给定的revision进行检测。
# 开始监听某个key ./etcdctl watch &amp;#34;/a/b&amp;#34; # 在另外一个窗口执行 .</description>
    </item>
    
    <item>
      <title>Kubernetes集群搭建一 之 etcd集群</title>
      <link>https://realjf.io/k8s/k8s-cluster-set-up-1/</link>
      <pubDate>Tue, 19 Mar 2019 14:13:46 +0800</pubDate>
      
      <guid>https://realjf.io/k8s/k8s-cluster-set-up-1/</guid>
      <description>系统要求 软硬件 最低配置 推荐配置 cpu和内存 master:至少2core和4GB内存 Node：至少4core和16GB Master:4core和16GB Node: 应根据需要运行的容器数量进行配置 linux操作系统 基于x86_64架构的各种linux发行版本 Red Hat Linux 7 CentOS 7 Docker 1.9版本以上 1.12版本 etcd 2.0版本及以上 3.0版本 本次实验选用的是centos7 1804版本
需要注意，kubernetes的master和node节点之间会有大量的网络通信，安全的做法是在防火墙上配置各组件需要相互通信的端口号。在一个安全的内网环境中，可以关闭防火墙服务
#关闭防火墙 systemctl disable firewalld systemctl stop firewalld # 禁用SELinux setenforce 0 # 也可以修改/etc/sysconfig/selinux，将SELINUX=enforcing修改成SELINUX=disabled 这里将搭建一个master节点和一个node节点的k8s集群 由于 raft 算法的特性，集群的节点数必须是奇数
- ip etcd节点名称 master节点 192.168.37.150 etcd1 node1节点 192.168.37.152 etcd2 请确保节点直接可以互相ping通
1. 安装docker docker版本为1.13.1 yum install docker -y # 由于后面都采用服务方式启动，所以docker启动参数需要加上--exec-opt native.cgroupdriver=systemd vim /usr/lib/systemd/system/docker.service # 在启动项上加上这行就可以 systemctl start docker 创建安装目录 mkdir -p /opt/kubernetes/bin 2.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on Realjf&#39;s blog</title>
    <link>https://realjf.io/categories/k8s/</link>
    <description>Recent content in k8s on Realjf&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jul 2022 11:08:22 +0800</lastBuildDate><atom:link href="https://realjf.io/categories/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K8s CSI插件开发实战 K8s CSI Plugin Development in Action</title>
      <link>https://realjf.io/k8s/k8s-csi-plugin-in-action/</link>
      <pubDate>Mon, 04 Jul 2022 11:08:22 +0800</pubDate>
      
      <guid>https://realjf.io/k8s/k8s-csi-plugin-in-action/</guid>
      <description>准备 kubernetes集群（1.15.5以上版本） go开发环境 开始 项目构建 我们需要开发CSI spec中规定的两个插件程序：
Node Plugin 在每个节点上运行, 作为一个grpc端点服务于CSI的RPCs,执行具体的挂卷操作。 Controller Plugin 同样为CSI RPCs服务,可以在任何地方运行,一般执行全局性的操作,比如创建/删除网络卷。 按照规范应该是两独立的程序，但这里为了简单会在一个程序里实现spec规定的所有gRPC服务
CSI有三种RPC：
身份服务：Node Plugin和Controller Plugin都必须实现这些RPC 控制器服务：Controller Plugin必须实现这些RPC 节点服务：Node Plugin必须实现这些RPC 首先构建程序目录
mkdir fsd-plugin &amp;amp;&amp;amp; cd fsd-plugin mkdir -p {cmd,bin,pkg/fsd} deploy/{kubernetes,examples} 创建文件：
touch pkg/fsd/{controllerserver.go,identityserver.go,nodeserver.go} 创建程序主函数和初始化所需要用到的两个文件
touch cmd/main.go pkg/fsd/driver.go 创建go mod包管理
go mod init fsd-csi-driver 最后目录结构如下：
. ├── bin │ ├── controllerplugin.go │ └── nodeplugin.go ├── cmd ├── deploy │ ├── examples │ └── kubernetes ├── go.mod └── pkg └── fsd ├── controllerserver.</description>
    </item>
    
    <item>
      <title>K8s CSI插件开发简介 K8s CSI Plugin Development Overview</title>
      <link>https://realjf.io/k8s/k8s-csi-plugin-development/</link>
      <pubDate>Mon, 04 Jul 2022 09:58:20 +0800</pubDate>
      
      <guid>https://realjf.io/k8s/k8s-csi-plugin-development/</guid>
      <description>CSI插件开发官方文档
简介 容器存储接口 (CSI) 是一种标准，用于将任意块和文件存储系统暴露给 Kubernetes 等容器编排系统 (CO) 上的容器化工作负载。使用 CSI 第三方存储提供商可以编写和部署插件，在 Kubernetes 中公开新的存储系统，而无需接触核心 Kubernetes 代码。
kubernetes版本与CSI兼容版本关系
kubernetes CSI 兼容版本 版本状态 v1.9 v0.1.0 Alpha v1.10 v0.2.0 Beta v1.11 v0.3.0 Beta v1.13 v0.3.0,v1.0.0 GA 开发和部署 最小要求 唯一的要求是关于 Kubernetes（主节点和节点）组件如何查找 CSI 驱动程序并与之通信
CSI要求如下：
Kubelet 到 CSI 驱动程序的通信 Kubelet 通过 Unix Domain Socket 直接向 CSI 驱动程序发出 CSI 调用（如 NodeStageVolume、NodePublishVolume 等）以挂载和卸载卷 Kubelet 通过 kubelet 插件注册机制发现 CSI 驱动程序（以及用于与 CSI 驱动程序交互的 Unix 域套接字）。 因此，部署在 Kubernetes 上的所有 CSI 驱动程序必须在每个支持的节点上使用 kubelet 插件注册机制注册自己。 Master 到CSI驱动程序的通信 Kubernetes 主组件不直接与 CSI 驱动程序通信（通过 Unix 域套接字或其他方式） Kubernetes 主组件仅与 Kubernetes API 交互。 因此，需要依赖于 Kubernetes API 的操作（如卷创建、卷附加、卷快照等）的 CSI 驱动程序必须监视 Kubernetes API 并针对它触发适当的 CSI 操作 因为这些要求是最低限度的规定，所以 CSI 驱动程序开发人员可以自由地实施和部署他们认为合适的驱动程序。</description>
    </item>
    
    <item>
      <title>构建一个基础K8s Operator| Build and Deploy a Basic Operator</title>
      <link>https://realjf.io/k8s/k8s-build-and-deploy-a-basic-operator/</link>
      <pubDate>Fri, 01 Jul 2022 15:00:11 +0800</pubDate>
      
      <guid>https://realjf.io/k8s/k8s-build-and-deploy-a-basic-operator/</guid>
      <description>准备 linux系统 go开发环境 operator sdk 包括： operator-sdk 命令行界面（CLI）工具和SDK方便了算子的开发。 operator lifecycle manager 这有助于集群内操作员的安装、升级和基于角色的访问控制 (RBAC) kubernetes 集群，可以使用minikube之类的工具在本地安装一个单机集群 镜像仓库 golang开发环境安装 golang下载
kubernetes集群安装 你需要的配置
2核以上cpu 2GB以上内存 20GB以上的磁盘空间 docker 安装conntrack 下载安装 需要提前关闭swap分区
# 关闭swap分区 swapoff -a # 修改/etc/fstab挂载的swap，注释swap挂载即可 reboot # 检查swap状态 free -h # 如果swap一行全部为0则为关闭 curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube 运行集群 minikube start --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --image-mirror-country=cn 参考minikube安装
operator sdk 安装 git clone https://github.com/operator-framework/operator-sdk cd operator-sdk git checkout master make install 可以参考operator sdk安装
构建kubernetes operator 第一步：生成样板代码 首先，运行minikube start运行本地集群</description>
    </item>
    
    <item>
      <title>使用kubeadm工具安装 kubernetes Use Kubeadm Install K8s</title>
      <link>https://realjf.io/k8s/kubeadm-install-k8s/</link>
      <pubDate>Tue, 20 Apr 2021 10:07:28 +0800</pubDate>
      
      <guid>https://realjf.io/k8s/kubeadm-install-k8s/</guid>
      <description>环境准备 centos-7 x86_64 2009 vmware 16 虚拟机 kubernetes: v1.21.0 docker-ce: 20.10.5 cpu最少：4核 内存最少：4GB swap：禁用 最小磁盘：100GB 请先在vmware虚拟机中安装好centos7,并且关闭防火墙和selinux
# 关闭防火墙 sed -ri &amp;#39;s#(SELINUX=).*#\1disabled#&amp;#39; /etc/selinux/config setenforce 0 systemctl disable firewalld systemctl stop firewalld # 禁用swap # 注释/etc/fstab关于swap的配置 # 然后执行如下命令 echo vm.swappiness=0 &amp;gt;&amp;gt; /etc/sysctl.conf # 重启 reboot # 查看是否禁用 free -m # 如果swap全部是0表示成功 docker-ce安装
# 安装yum源 yum install -y wget &amp;amp;&amp;amp; wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo # 安装docker yum install docker-ce # 设置开机自启 systemctl enable docker &amp;amp;&amp;amp; systemctl start docker docker version 第一步：安装kubeadm和相关工具 官网yum源：https://packages.</description>
    </item>
    
    <item>
      <title>k8s 之 Operator模式 Operator Pattern</title>
      <link>https://realjf.io/k8s/operator-pattern/</link>
      <pubDate>Sun, 04 Apr 2021 10:26:27 +0800</pubDate>
      
      <guid>https://realjf.io/k8s/operator-pattern/</guid>
      <description>Operator模式介绍https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/
Operator 模式旨在捕获（正在管理一个或一组服务的）运维人员的关键目标。 负责特定应用和 service 的运维人员，在系统应该如何运行、如何部署以及出现问题时如何处理等方面有深入的了解。
在 Kubernetes 上运行工作负载的人们都喜欢通过自动化来处理重复的任务。 Operator 模式会封装你编写的（Kubernetes 本身提供功能以外的）任务自动化代码。
Operator 是 Kubernetes API 的客户端，充当定制资源的控制器。
使用operator可以自动化的事情：
按需部署应用 获取/还原应用状态的备份 处理应用代码的升级以及相关改动。例如，数据库 schema 或额外的配置设置 发布一个 service，要求不支持 Kubernetes API 的应用也能发现它 模拟整个或部分集群中的故障以测试其稳定性 在没有内部成员选举程序的情况下，为分布式应用选择首领角色 部署 Operator 最常见的方法是将自定义资源及其关联的控制器添加到你的集群中。 跟运行容器化应用一样，控制器通常会运行在 控制平面 之外。
部署 Operator 后，你可以对 Operator 所使用的资源执行添加、修改或删除操作。
编写自己的operator 以下是一些库和工具，你可以用于编写自己的云原生operator
kubebuilder https://book.kubebuilder.io/ KUDO https://kudo.dev/ Metacontroller https://metacontroller.app/ Operator Framework https://operatorframework.io/ 当然也可以在OperatorHub.io上找到现成的、适合你的operator</description>
    </item>
    
    <item>
      <title>k8s集群 之一 创建集群 minikube安装使用 Minikube Start</title>
      <link>https://realjf.io/k8s/minikube-start/</link>
      <pubDate>Sat, 03 Apr 2021 13:59:47 +0800</pubDate>
      
      <guid>https://realjf.io/k8s/minikube-start/</guid>
      <description>使用Minikube部署本地k8s集群相对比较简单，非常推荐将其用于本地k8s开发环境，唯一麻烦点的仅仅是网络问题
实验环境 CentOS 7.9.2009 minikube v1.18 Docker v1.13.1 Kubernetes v1.20.2 什么是minikube？ Minikube 是一个轻量级的Kubernetes实现，会在本机创建一台虚拟机，并部署一个只包含一个节点的简单集群。 Minikube适用于Linux, Mac OS和Windows系统。Minikube CLI提供了集群的基本引导操作，包括启动、停止、状态和删除。
Minikube的目标是成为本地Kubernetes应用程序开发的最佳工具，并支持所有适合的Kubernetes功能！
minikube安装 可以参考minikube 安装的网站minikube安装
# RPM package curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm sudo rpm -ivh minikube-latest.x86_64.rpm # Debian package curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb sudo dpkg -i minikube_latest_amd64.deb # Binary download/amd64/x86_64 curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube minikube二进制下载地址：https://github.com/kubernetes/minikube/releases
安装docker yum update yum install docker -y systemctl enable docker systemctl start docker # 检查docker版本 docker version # 添加docker组，将当前用户加入该组（需要在非root用户下执行） sudo groupadd docker sudo usermod -aG docker ${USER} sudo systemctl restart docker su root # 需要切换下用户，让配置生效 su ${USER} minikube开始 minikube start --registry-mirror=https://registry.</description>
    </item>
    
  </channel>
</rss>

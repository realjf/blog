<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Consul on Realjf&#39;s blog</title>
    <link>https://realjf.io/tags/consul/</link>
    <description>Recent content in Consul on Realjf&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Jun 2021 10:23:01 +0800</lastBuildDate>
    
	<atom:link href="https://realjf.io/tags/consul/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>服务发现实战之一 consul服务发现构建 Discover Consul in Action</title>
      <link>https://realjf.io/golang/discover-consul-in-action/</link>
      <pubDate>Sun, 06 Jun 2021 10:23:01 +0800</pubDate>
      
      <guid>https://realjf.io/golang/discover-consul-in-action/</guid>
      <description>准备  ubuntu v20.04 git go v1.16  项目结构 . ├── config ├── discover ├── endpoint ├── go.mod ├── go.sum ├── main.go ├── service └── transport   transport层 项目提供的服务方式 endpoint层 用于接收请求并返回响应 service层 业务代码实现层 discover 服务发现实现  什么是consul？ Consul 是一种服务网格解决方案，提供具有服务发现、配置和分段功能的全功能控制平面。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建完整的服务网格。 Consul 需要一个数据平面并支持代理和本地集成模型。 Consul 附带一个简单的内置代理，因此一切都可以开箱即用，而且还支持 第三方方代理集成，例如 Envoy。
Consul 的主要特点是： - 服务发现：Consul 的客户端可以注册一个服务，例如 api 或 mysql，其他客户端可以使用 Consul 来发现给定服务的提供者。使用 DNS 或 HTTP，应用程序可以轻松找到它们所依赖的服务。 - 健康检查：Consul 客户端可以提供任意数量的健康检查，要么与给定的服务相关（“网络服务器是否返回 200 OK”），要么与本地节点（“内存利用率是否低于 90%”）相关联。操作员可以使用此信息来监控集群健康状况，并且服务发现组件可以使用它来将流量路由到不健康的主机之外。 - KV 存储：应用程序可以将 Consul 的分层键/值存储用于多种目的，包括动态配置、功能标记、协调、领导选举等。简单的 HTTP API 使其易于使用。 - 安全的服务通信：Consul 可以为服务生成和分发 TLS 证书，以建立相互的 TLS 连接。意图可用于定义允许哪些服务进行通信。可以通过实时更改意图轻松管理服务分段，而不是使用复杂的网络拓扑和静态防火墙规则。 - 多数据中心：Consul 支持开箱即用的多个数据中心。这意味着 Consul 的用户不必担心构建额外的抽象层以扩展到多个区域。</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue.js on Realjf&#39;s blog</title>
    <link>https://realjf.io/tags/vue.js/</link>
    <description>Recent content in vue.js on Realjf&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Nov 2020 14:29:47 +0800</lastBuildDate>
    
	<atom:link href="https://realjf.io/tags/vue.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vue.js 2 系列之十四 处理事件 Handling Events</title>
      <link>https://realjf.io/vuejs/handling-events/</link>
      <pubDate>Sun, 29 Nov 2020 14:29:47 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/handling-events/</guid>
      <description>本节将学习:
 使用v-on指令 使用事件对象 用一个方法处理事件以及接收事件对象作为参数值 对您想要的每个事件应用v-on指令，使用事件对象接收或检测事件类型 使用事件传播修饰符 使用鼠标和键盘修饰符  处理事件 v-on指令被用于处理事件,其格式如下：
&amp;lt;h3 v-on:click=&amp;#34;name=&amp;#39;Clicked!&amp;#39;&amp;#34;&amp;gt;&amp;lt;/h3&amp;gt;其中：
 v-on是指令 click是事件参数 name=&#39;Clicked!&amp;rsquo; 是表达式  理解事件和事件对象 有许多可用的事件类型，如下：
   事件类型 描述     click 当鼠标在一个元素边界内部被按下并释放时触发   mousedown 鼠标按钮在元素边界内被按下时触发   mousemove 鼠标在元素边界内移动时触发   mouseleave 鼠标离开元素边界时触发   keydown 一个按键按下时触发    有用的事件对象自有属性 | 自有属性| 描述| |:&amp;mdash;:|:&amp;mdash;:| | target | 该属性返回当前事件触发的html元素的DOM对象 | | currentTarget | 该属性返回当前正在被处理事件的HTML元素的DOM对象，不同于target | | type | 该属性返回事件类型 | | key | 对于键盘事件，该属性返回事件关联的key |</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之十三 使用转发器指令 Using the Repeater Directive</title>
      <link>https://realjf.io/vuejs/using-the-repeater-directive/</link>
      <pubDate>Sun, 29 Nov 2020 13:16:08 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/using-the-repeater-directive/</guid>
      <description>本节将介绍
 v-for指令 v-for指令的alias特性 用v-bind指令定义一个key属性 使用v-for指令的index特性 使用Vue.set方法 在v-for指令的表达式中使用data中预置的一个数值  v-for指令，枚举一个数组 ...&amp;lt;h2 class=&amp;#34;bg-primary text-white text-center p-3&amp;#34;&amp;gt;Products&amp;lt;/h2&amp;gt;&amp;lt;table class=&amp;#34;table table-sm table-bordered table-striped text-left&amp;#34;&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Price&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr v-for=&amp;#34;p in products&amp;#34;&amp;gt;&amp;lt;td&amp;gt;Name&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Category&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;......data: function() {return {products: [{name: &amp;#34;Kayak&amp;#34;, price: 275}]}}...v-for指令的alias &amp;lt;h2 class=&amp;#34;bg-primary text-white text-center p-3&amp;#34;&amp;gt;Products&amp;lt;/h2&amp;gt;&amp;lt;table class=&amp;#34;table table-sm table-bordered table-striped text-left&amp;#34;&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Price&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr v-for=&amp;#34;p in products&amp;#34; v-bind:key=&amp;#34;p.</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之十二 使用基本指令 Using the Basic Directives</title>
      <link>https://realjf.io/vuejs/using-the-basic-directives/</link>
      <pubDate>Sun, 29 Nov 2020 12:38:13 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/using-the-basic-directives/</guid>
      <description>v-on指令，处理事件 &amp;lt;a v-on:click=&amp;#34;handleClick&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;v-on指令用于处理事件。此指令已配置通过click点击事件调用方法称为handleClick。在组件脚本的methods部分定义了这个方法元素。
v-text指令，设置元素的文本内容 &amp;lt;span v-text=&amp;#34;name&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;这是v-text指令，用于设置元素的文本内容，该指令将完整的替换元素的内容。 如上，span元素的内容将是name变量的内容。
v-html指令，以html方式解析显示内容 &amp;lt;span v-html=&amp;#34;fragment&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;该指令将fragment变量的内容作为html数据显示。
v-if指令，可选的显示元素 &amp;lt;h4 v-if=&amp;#34;showElements&amp;#34;&amp;gt;{{ price }}&amp;lt;/h4&amp;gt;该指令判断showElements变量是否为真，如果为真，则h4标签可见，如果为假，则不可见。 这里的不可见表示不是隐藏，而是不生成标签，也不占空间。
v-else,v-else-if指令，与v-if指令联合使用，功能相似 &amp;lt;h3 v-if=&amp;#34;counter % 3 == 0&amp;#34;&amp;gt;1&amp;lt;/h3&amp;gt;&amp;lt;h3 v-else-if=&amp;#34;counter % 3 == 1&amp;#34;&amp;gt;2&amp;lt;/h3&amp;gt;&amp;lt;h3 v-else=&amp;#34;counter % 3 == 2&amp;#34;&amp;gt;3&amp;lt;/h3&amp;gt;v-bind指令，设置一个元素的属性和自带属性值 &amp;lt;h3 v-bind:class=&amp;#34;class1&amp;#34; class=&amp;#34;display-5&amp;#34;&amp;gt;&amp;lt;/h3&amp;gt;...computed: {class1(){return this.highlight ? [&amp;#34;bg-light&amp;#34;, &amp;#34;text-dark&amp;#34;,&amp;#34;display-4&amp;#34;] : [&amp;#34;bg-dark&amp;#34;, &amp;#34;text-light&amp;#34;, &amp;#34;p-2&amp;#34;];}}... 该指令可以配置为一个变量或表达式。 当然也可以用对象或者数组配置class属性。 同时，其还会合并直接在元素上设置的class属性  &amp;lt;h3 v-bind:style=&amp;#34;elemStyles&amp;#34;&amp;gt;&amp;lt;/h3&amp;gt;...computed: {elemStyles(){return {&amp;#34;border&amp;#34;: &amp;#34;5px solid red&amp;#34;,&amp;#34;background-color&amp;#34;: this.</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之九 理解vue.js Understanding Vuejs 2</title>
      <link>https://realjf.io/vuejs/understanding-vuejs-2/</link>
      <pubDate>Sat, 14 Nov 2020 20:31:27 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/understanding-vuejs-2/</guid>
      <description>准备 创建项目
vue create nomagic在项目根目录下添加新文件vue.config.js
module.exports = {runtimeCompiler: true}在项目根目录下运行
npm install bootstrap@4.0.0在main.js里添加bootstrap.min.css如下内容
import Vue from &amp;#39;vue&amp;#39;import App from &amp;#39;./App.vue&amp;#39;import &amp;#34;bootstrap/dist/css/bootstrap.min.css&amp;#34;;Vue.config.productionTip = falsenew Vue({render: h =&amp;gt; h(App),}).$mount(&amp;#39;#app&amp;#39;)运行例子
npm run serve使用DOM API创建应用 在main.js中添加如下内容：
require(&amp;#39;../node_modules/bootstrap/dist/css/bootstrap.min.css&amp;#39;)let counter = 1;let container = document.createElement(&amp;#34;div&amp;#34;);container.classList.add(&amp;#34;text-center&amp;#34;, &amp;#34;p-3&amp;#34;);let msg = document.createElement(&amp;#34;h1&amp;#34;);msg.classList.add(&amp;#34;bg-primary&amp;#34;, &amp;#34;text-white&amp;#34;, &amp;#34;p-3&amp;#34;);msg.textContent = &amp;#34;Button Not Pressed&amp;#34;;let button = document.</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之八 运动商店A Real App 4</title>
      <link>https://realjf.io/vuejs/a-real-app-4/</link>
      <pubDate>Mon, 09 Nov 2020 14:15:41 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/a-real-app-4/</guid>
      <description>基于之前一篇基础之上进行构建 /vuejs/a-real-app-3/
首先，运行json web服务
npm run json 然后运行运动商店http服务器
npm run serve 添加商品管理功能 在src/store文件夹中的index.js文件中添加如下内容
import Vue from &amp;#34;vue&amp;#34;; import Vuex from &amp;#34;vuex&amp;#34;; import Axios from &amp;#34;axios&amp;#34;; import CartModule from &amp;#34;./cart&amp;#34;; import OrdersModule from &amp;#34;./orders&amp;#34;; import AuthModule from &amp;#34;./auth&amp;#34;; Vue.use(Vuex); const baseUrl = &amp;#34;http://localhost:3500&amp;#34;; const productsUrl = `${baseUrl}/products`; const categoriesUrl = `${baseUrl}/categories`; const testData = []; for(let i = 1; i &amp;lt;= 10; i++){ testData.push({ id: i, name: `Product #${i}`, category: `Category ${i % 3}`, description: `This is Product #${i}`, price: i * 50 }) } export default new Vuex.</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之七 运动商店 A Real App 3</title>
      <link>https://realjf.io/vuejs/a-real-app-3/</link>
      <pubDate>Sat, 07 Nov 2020 14:35:06 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/a-real-app-3/</guid>
      <description>基于之前一篇基础之上进行构建 /vuejs/a-real-app-2/
准备 在data.js文件中添加如下内容：
var faker = require(&amp;#34;faker&amp;#34;);var data = [];var categories = [&amp;#34;Watersports&amp;#34;, &amp;#34;Soccer&amp;#34;,&amp;#34;Chess&amp;#34;, &amp;#34;Running&amp;#34;];faker.seed(100);for(let i=1; i&amp;lt;=500; i++){var category = faker.helpers.randomize(categories);data.push({id: i,name: faker.commerce.productName(),category: category,description: `${category}: ${faker.lorem.sentence(3)}`,price: faker.commerce.price()})}module.exports = function() {return {products: data,categories: categories,orders: [],};};然后执行如下命令：
npm run json在另外一个终端执行如下命令：
npm run serve处理大量数据 改进分页导航 在src/components文件夹的PageControls.vue文件中添加如下内容：
&amp;lt;template&amp;gt;&amp;lt;div class=&amp;#34;row mt-2&amp;#34;&amp;gt;&amp;lt;div class=&amp;#34;col-3 form-group&amp;#34;&amp;gt;&amp;lt;select class=&amp;#34;form-control&amp;#34; v-on:change=&amp;#34;changePageSize&amp;#34;&amp;gt;&amp;lt;option value=&amp;#34;4&amp;#34;&amp;gt;4 per page&amp;lt;/option&amp;gt;&amp;lt;option value=&amp;#34;8&amp;#34;&amp;gt;8 per page&amp;lt;/option&amp;gt;&amp;lt;option value=&amp;#34;12&amp;#34;&amp;gt;12 per page&amp;lt;/option&amp;gt;&amp;lt;/select&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;text-right col&amp;#34;&amp;gt;&amp;lt;button v-bind:disabled=&amp;#34;currentPage==1&amp;#34; v-on:click=&amp;#34;setCurrentPage(currentPage-1)&amp;#34; class=&amp;#34;btn btn-secondary mx-1&amp;#34;&amp;gt;Previous&amp;lt;/button&amp;gt;&amp;lt;span v-if=&amp;#34;currentPage &amp;gt; 4&amp;#34;&amp;gt;&amp;lt;button v-on:click=&amp;#34;setCurrentPage(1)&amp;#34; class=&amp;#34;btn btn-secondary mx-1&amp;#34;&amp;gt;1&amp;lt;/button&amp;gt;&amp;lt;span class=&amp;#34;h4&amp;#34;&amp;gt;.</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之六 运动商店 A Real App 2</title>
      <link>https://realjf.io/vuejs/a-real-app-2/</link>
      <pubDate>Sat, 07 Nov 2020 11:49:25 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/a-real-app-2/</guid>
      <description>下单 基于之前一篇基础之上进行构建 /vuejs/a-real-app/
创建购物车预置 在src/components文件夹下新建ShoppingCart.vue文件，其内容如下：
&amp;lt;template&amp;gt;&amp;lt;h4 class=&amp;#34;bg-primary text-white text-center p-2&amp;#34;&amp;gt;placeholder for Cart&amp;lt;/h4&amp;gt;&amp;lt;/template&amp;gt;配置url路由 在src/router文件夹中添加index.js文件中添加如下内容：
import Vue from &amp;#34;vue&amp;#34;;import VueRouter from &amp;#34;vue-router&amp;#34;;import Store from &amp;#34;../components/Store&amp;#34;;import ShoppingCart from &amp;#34;../components/ShoppingCart&amp;#34;;Vue.use(VueRouter);export default new VueRouter({mode: &amp;#34;history&amp;#34;,routes: [{path:&amp;#34;/&amp;#34;, component: Store},{path: &amp;#34;/cart&amp;#34;, component: ShoppingCart},{path: &amp;#34;*&amp;#34;, redirect: &amp;#34;/&amp;#34;}]})将上面的路由文件添加到main.js中
import Vue from &amp;#39;vue&amp;#39;import App from &amp;#39;./App.vue&amp;#39;// 引入jqueryimport $ from &amp;#39;jquery&amp;#39;Vue.</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之五 运动商店 A Real App</title>
      <link>https://realjf.io/vuejs/a-real-app/</link>
      <pubDate>Fri, 06 Nov 2020 16:41:21 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/a-real-app/</guid>
      <description>准备 首先创建项目
vue create sportsstore --default 安装jquery，bootstrap，popper.js
cd sportsstore npm install jquery npm install bootstrap@4.0.0 npm install popper 在 main.js文件中引入jquery和bootstrap
import Vue from &amp;#39;vue&amp;#39; import App from &amp;#39;./App.vue&amp;#39; // 引入jquery import $ from &amp;#39;jquery&amp;#39; Vue.config.productionTip = false // 添加bootstrap框架 import &amp;#34;bootstrap/dist/css/bootstrap.min.css&amp;#34; new Vue({ render: h =&amp;gt; h(App), }).$mount(&amp;#39;#app&amp;#39;) 配置package.json的eslintConfig里的rules
&amp;#34;rules&amp;#34;: { &amp;#34;no-unused-vars&amp;#34;:&amp;#34;off&amp;#34;, &amp;#34;no-console&amp;#34;:&amp;#34;off&amp;#34;, &amp;#34;no-declare&amp;#34;: &amp;#34;off&amp;#34; }, 运行项目
npm run serve 添加附加包 cd sportsstore npm install axios@0.18.0 npm install vue-router@3.0.1 npm install vuex@3.</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之四 javascript入门 Js Primer</title>
      <link>https://realjf.io/vuejs/js-primer/</link>
      <pubDate>Fri, 06 Nov 2020 15:35:03 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/js-primer/</guid>
      <description>准备 首先创建项目
vue create jsprimer --default 安装jquery，bootstrap，popper.js
cd jsprimer npm install jquery npm install bootstrap@4.0.0 npm install popper 在 main.js文件中引入jquery和bootstrap
import Vue from &amp;#39;vue&amp;#39; import App from &amp;#39;./App.vue&amp;#39; // 引入jquery import $ from &amp;#39;jquery&amp;#39; Vue.config.productionTip = false // 添加bootstrap框架 import &amp;#34;bootstrap/dist/css/bootstrap.min.css&amp;#34; new Vue({ render: h =&amp;gt; h(App), }).$mount(&amp;#39;#app&amp;#39;) 配置package.json的eslintConfig里的rules
&amp;#34;rules&amp;#34;: { &amp;#34;no-unused-vars&amp;#34;:&amp;#34;off&amp;#34;, &amp;#34;no-console&amp;#34;:&amp;#34;off&amp;#34;, &amp;#34;no-declare&amp;#34;: &amp;#34;off&amp;#34; }, 运行项目
npm run serve 函数 定义函数，包括缺省值，函数返回值， 在main.js中添加如下代码
func myFunc(name, age = 18) { return &amp;#34;Hello &amp;#34; + name + &amp;#34;, your age is &amp;#34; + age.</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之三 Html 和 Css 入门</title>
      <link>https://realjf.io/vuejs/html-css-primer/</link>
      <pubDate>Fri, 06 Nov 2020 14:41:48 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/html-css-primer/</guid>
      <description>准备 首先创建项目
vue create htmlcss --default 安装jquery，bootstrap，popper.js
cd htmlcss npm install jquery npm install bootstrap@4.0.0 npm install popper 在 main.js文件中引入jquery和bootstrap
import Vue from &amp;#39;vue&amp;#39; import App from &amp;#39;./App.vue&amp;#39; // 引入jquery import $ from &amp;#39;jquery&amp;#39; Vue.config.productionTip = false // 添加bootstrap框架 import &amp;#34;bootstrap/dist/css/bootstrap.min.css&amp;#34; new Vue({ render: h =&amp;gt; h(App), }).$mount(&amp;#39;#app&amp;#39;) eslint配置
# 进入node_modules目录的.bin目录下，初始化eslint cd node_modules/.bin/ eslint --init # 设置选项，除选择vue.js外，其他都选择默认选项 # 最后，将node_modules目录.bin目录下的.eslintrc.js文件拷贝到项目根目录下 # window下 copy .eslintrc.js ..\..\  # linux下 cp .eslintrc.js ../../ 配置.</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之二 理解vue.js Understanding Vue.js</title>
      <link>https://realjf.io/vuejs/understanding-vuejs/</link>
      <pubDate>Fri, 06 Nov 2020 14:26:34 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/understanding-vuejs/</guid>
      <description>理解web应用结构模型 往返交互(round-trip)或者多页应用模型 通过用户点击提交表单等操作，浏览器请求返回新的html文档结构供用户浏览
单体应用模型或单页应用模型 用户通过点击提交表单发送ajax请求更新首次返回的html文档中的部分数据</description>
    </item>
    
    <item>
      <title>vue.js 2 系列之一 第一个vue.js应用 First Vuejs App</title>
      <link>https://realjf.io/vuejs/first-vuejs-app/</link>
      <pubDate>Fri, 06 Nov 2020 10:37:34 +0800</pubDate>
      
      <guid>https://realjf.io/vuejs/first-vuejs-app/</guid>
      <description>准备开发环境  安装最新版node.js 使用npm安装@vue/cli命令行工具包 安装git 安装开发ide，如vscode，sublime text, atom,vim等 安装浏览器，chrome,firefox等   安装vue命令：npm install -g @vue/cli
 创建工程项目 vue create todo --default 项目结构解析 执行tree -L 1后得到如下结构
├── babel.config.js ├── node_modules ├── package.json ├── package-lock.json ├── public | ├── favicon.ico | └── index.html ├── README.md └── src ├── App.vue ├── assets │ └── logo.png ├── components │ └── HelloWorld.vue └── main.js  public/index.html 这是浏览器加载的第一个文件 src/main.js 这个vue.js应用的配置js文件 src/App.vue 这是vue.js组件，包含html文档结构和js代码以及css文档样式 src/assets/logo.png assets文件夹是存放静态资源文件  运行开发工具 cd todo npm run serve # 运行结果如下： App running at: - Local: http://localhost:8080/ - Network: http://192.</description>
    </item>
    
  </channel>
</rss>
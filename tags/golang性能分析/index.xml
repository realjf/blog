<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang性能分析 on Realjf&#39;s blog</title>
    <link>https://realjf.io/tags/golang%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
    <description>Recent content in golang性能分析 on Realjf&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Mar 2019 15:14:16 +0800</lastBuildDate><atom:link href="https://realjf.io/tags/golang%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang性能分析利器之Pprof</title>
      <link>https://realjf.io/golang/pprof/</link>
      <pubDate>Tue, 19 Mar 2019 15:14:16 +0800</pubDate>
      
      <guid>https://realjf.io/golang/pprof/</guid>
      <description>简介 pprof是golang程序一个性能分析的工具，可以查看堆栈、cpu信息等
pprof有2个包：net/http/pprof以及runtime/pprof
二者之间的关系：net/http/pprof包只是使用runtime/pprof包来进行封装了一下，并在http端口上暴露出来
性能分析利器 pprof go本身提供的工具链有：
 runtime/pprof：采集程序的运行数据进行分析 net/http/pprof：采集HTTP Server的运行时数据进行分析  pprof以profile.proto读取分析样本的集合，并生成报告以可视化并帮助分析数据
 profile.proto是一个Protocol Buffer v3的描述文件，它描述了一组callstack和symbolization信息，作用是表示统计分析的一组采样的调用栈，是很常见的stacktrace配置文件格式
 使用方式  Report generation：报告生成 Interactive terminal use：交互式终端使用 Web interface：Web界面  1. web服务器方式 假如你的go呈现的是用http包启动的web服务器，当想要看web服务器的状态时，选择【net/http/pprof】，使用方法如下：
&amp;#34;net/http&amp;#34; _ &amp;#34;net/http/pprof&amp;#34; 查看结果：通过访问：http://domain:port/debug/pprof查看当前web服务的状态
2. 服务进程 如果你go程序是一个服务进程，同样可以选择【net/http/pprof】包，然后开启另外一个goroutine来开启端口监听
// 远程获取pprof数据 go func() {  log.Println(http.ListenAndServe(&amp;#34;localhost:8080&amp;#34;, nil)) } 3. 应用程序 如果你的go程序只是一个应用程序，那就直接使用runtime/pprof包，具体用法是用pprof.StartCPUProfile和pprof.StopCPUProfile。
var cpuprofile = flag.String(&amp;#34;cpuprofile&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;write cpu profile to file&amp;#34;)  func main() {  flag.Parse()  if *cpuprofile != &amp;#34;&amp;#34; {  f, err := os.</description>
    </item>
    
  </channel>
</rss>
